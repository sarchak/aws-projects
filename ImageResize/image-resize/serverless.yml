service: image-resize

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, "dev"}
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        - Fn::Join:
          - ''
          - - ${self:custom.appBucketArn}
            - '/*'
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
      Resource:
        Fn::GetAtt:
          - appTable
          - Arn
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
      Resource:
        Fn::GetAtt:
          - cacheTable
          - Arn
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
      Resource:
        Fn::GetAtt:
          - metricsTable
          - Arn
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - ${self:custom.snsWorkerTopicArn}

  environment:
    SLACK_CLIENT_ID: ${file(../config/config.${self:provider.stage}.json):slack.CLIENT_ID}
    SLACK_CLIENT_SECRET: ${file(../config/config.${self:provider.stage}.json):slack.CLIENT_SECRET}
    DYNAMODB_TABLE_NAME: ${self:custom.appTableName}
    CACHE_TABLE_NAME: ${self:custom.cacheTableName}
    METRICS_TABLE_NAME: ${self:custom.metricsTableName}
    APP_BUCKET: ${self:custom.appBucketName}
    SNS_TOPIC_ARN: ${self:custom.snsWorkerTopicArn}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: true
  appTableName: ${file(../config/config.${self:provider.stage}.json):app.table_name}-${self:provider.stage}
  appBucketName: ${file(../config/config.${self:provider.stage}.json):app.bucket}-${self:provider.stage}
  cacheTableName: ${file(../config/config.${self:provider.stage}.json):app.cache_table_name}-${self:provider.stage}
  metricsTableName: ${file(../config/config.${self:provider.stage}.json):app.image_metrics_table_name}-${self:provider.stage}
  appBucketArn:
      Fn::Join:
        - ':'
        - - arn
          - aws
          - s3
          - ''
          - ''
          - ${file(../config/config.${self:provider.stage}.json):app.bucket}-${self:provider.stage}
  snsTopicName: sns-image-resize-topic-${self:provider.stage}
  snsWorkerTopicArn:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - ${self:custom.snsTopicName}
  customDomain:
    domainName: api-${self:provider.stage}.imageresize.xyz
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

functions:
  authorization:
    handler: handler.authorization
    events:
      - http:
          method: get
          path: slack/authorization
  resize:
    handler: handler.resize
    events:
      - http:
          method: post
          path: slack/resize
  slash:
    handler: handler.slash
    events:
      - http:
          method: post
          path: slack/slash
  helpapi:
    handler: handler.helpapi
    events:
      - http:
          method: post
          path: slack/help
  image_resize:
    handler: resizer.image_resize_worker
    events:
      - sns:
          arn: ${self:custom.snsWorkerTopicArn}
          topicName: ${self:custom.snsTopicName}


resources:
  Resources:
    resized:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.appBucketName}
        LifecycleConfiguration:
          Rules:
          -
            ExpirationInDays: 1
            Status: Enabled
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopicName}
        DisplayName: Topic to distribute work
    appTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.appTableName}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    cacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.cacheTableName}
        AttributeDefinitions:
          - AttributeName: callback_id
            AttributeType: S
        KeySchema:
          - AttributeName: callback_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    metricsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.metricsTableName}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: month
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: month
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

